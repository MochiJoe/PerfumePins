package perfume_pins;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/perfume_pins") // This means URL's start with /perfume_pins (after Application path)
public class PinController {
    @Autowired // This means to get the bean called pinRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PinRepository pinRepository;


    @GetMapping(path = "/add") // Map ONLY GET Requests
    public @ResponseBody
    String addNewPin(
            @RequestParam Long pinId,
            @RequestParam String pinName,
            @RequestParam Integer pinNumber

    ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Pin myPin = new Pin();
        myPin.setPinId(pinId);
        myPin.setPinName(pinName);
        myPin.setPinNumber(pinNumber);
        pinRepository.save(myPin);
        return "Saved: " + "<br><br>" +
                "Pin ID #: " + myPin.getPinId() + "<br>" +
                "Pin CD Name: " + myPin.getPinName() + "<br>" +
                "Pin Total Owned: x" + myPin.getPinNumber();
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<Pin> getAllPins() {
        // This returns a JSON or XML with the users
        return pinRepository.findAll();
    }

    @GetMapping(path = "/allOwned")
    public @ResponseBody Iterable<Pin> getOwnedPins() {
        ArrayList<Pin> ownedPinList = new ArrayList<Pin>();

        for (Pin pin : getAllPins()) {
            if (pin.getPinNumber() > 0) {
                ownedPinList.add(pin);
            }
        }
        return ownedPinList;
    }
    //Checks for all the Pins I don't have.
    @GetMapping(path = "/allMissing")
    public @ResponseBody Iterable<Pin> getMissingPins() {
        ArrayList<Pin> missingPinList = new ArrayList<Pin>();

        for (Pin pin : getAllPins()) {
            if (pin.getPinNumber() == 0) {
                missingPinList.add(pin);
            }
        }
        return missingPinList;
    }
    //Checks for Single Pins
    @GetMapping(path = "/uniquePins")
    public @ResponseBody Iterable<Pin> getUniquePins() {
        ArrayList<Pin> uniquePinList = new ArrayList<Pin>();

        for (Pin pin : getAllPins()) {
            if (pin.getPinNumber() == 1) {
                uniquePinList.add(pin);
            }
        }
        return uniquePinList;
    }
    //The last method added
    @DeleteMapping(path = "/delete/{id}")
    public @ResponseBody String deletePin(@PathVariable("id") Integer id){
        pinRepository.deleteById(id);
        return "\n Pin ID " + id + "deleted.\n";
    }

}


